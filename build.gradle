plugins {
    id 'java'
    id("io.freefair.lombok") version "8.13.1"
    id 'application'
    id 'maven-publish'
}

group = 'org.gegolabs'
version = '1.0.0'

application {
    mainClass = 'org.gegolabs.mcp1.Main'
    applicationDefaultJvmArgs = [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED',
        '--add-opens', 'java.base/java.io=ALL-UNNAMED',
        '--add-opens', 'java.base/java.net=ALL-UNNAMED',
        '--add-opens', 'java.base/java.nio=ALL-UNNAMED',
        '--add-opens', 'java.base/java.time=ALL-UNNAMED',
        '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-opens', 'java.base/sun.util.calendar=ALL-UNNAMED'
    ]
}

repositories {
    mavenCentral()
}



dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
// Replace the shorthand with explicit module dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'


    implementation 'io.modelcontextprotocol.sdk:mcp:0.10.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    //implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.5.13'

    //Generaci√≥n din√°mica de schemas
    //implementation 'com.kjetland:mbknor-jackson-jsonschema_2.13:1.0.39'
    implementation 'com.github.victools:jsonschema-generator:4.31.1'

    testImplementation 'org.mockito:mockito-core:5.8.0'


    implementation 'commons-net:commons-net:3.9.0'

    implementation 'org.eclipse.jetty:jetty-server:12.0.22'
    implementation 'org.eclipse.jetty.ee10:jetty-ee10-servlet:12.0.22'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes 'Main-Class': 'org.gegolabs.mcp1.Main'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

test {
    useJUnitPlatform()
}

// Configure Javadoc to ignore warnings from generated code
javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

// Configuraci√≥n de publicaci√≥n
publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            //artifactId = project.name // o ponle un nombre espec√≠fico: artifactId = 'mi-libreria'


            // Metadata adicional (opcional)
            pom {
                name = 'uMCP'
                description = 'Framework para desarrollo de servidores MCP'
            }
        }
    }
}


// Variables capturadas antes del bloque doLast para evitar deprecaci√≥n
def projectGroup = project.group
def projectName = project.name
def projectVersion = project.version
def userHome = System.properties['user.home']


tasks.register('generateRunScript') {
    doLast {
        def scriptFile = file('run.sh')
        def mainClassName = application.mainClass.get()
        def jvmArgs = application.applicationDefaultJvmArgs
        def jarFileName = "${projectName}-${projectVersion}.jar"

        def scriptContent = """#!/bin/bash

# Script to run the MCP server application

# Set the main class
MAIN_CLASS="${mainClassName}"

# JVM arguments from build.gradle
JVM_ARGS=(
"""
        // Group JVM arguments in pairs (--add-opens and its value)
        for (int i = 0; i < jvmArgs.size(); i += 2) {
            if (i + 1 < jvmArgs.size()) {
                scriptContent += "    \"${jvmArgs[i]}\" \"${jvmArgs[i+1]}\"\n"
            } else {
                scriptContent += "    \"${jvmArgs[i]}\"\n"
            }
        }

        scriptContent += """)

# Check if Gradle wrapper exists
if [ -f "./gradlew" ]; then
    echo "Starting application using Gradle wrapper..."
    ./gradlew run "\$@"
else
    # If no Gradle wrapper, try to run the JAR directly
    # First, check if the JAR exists
    JAR_FILE="build/libs/${jarFileName}"
    if [ -f "\$JAR_FILE" ]; then
        echo "Starting application using Java..."
        java "\${JVM_ARGS[@]}" -jar "\$JAR_FILE" "\$@"
    else
        echo "JAR file not found. Building the project first..."
        # Try to build with gradle if available
        if command -v gradle &> /dev/null; then
            gradle build
            if [ -f "\$JAR_FILE" ]; then
                echo "Starting application using Java..."
                java "\${JVM_ARGS[@]}" -jar "\$JAR_FILE" "\$@"
            else
                echo "Failed to build the JAR file. Please build the project manually."
                exit 1
            fi
        else
            echo "Neither Gradle wrapper nor Gradle command found. Please build the project manually."
            exit 1
        fi
    fi
fi

echo "Application has been terminated."
"""

        scriptFile.text = scriptContent
        scriptFile.setExecutable(true)

        println "Run script generated at: ${scriptFile.absolutePath}"
    }
}

tasks.register('publishLocal') {
    dependsOn 'publishToMavenLocal'

    doLast {
        println "\n=========================================="
        println "‚úÖ JAR publicado exitosamente!"
        println "=========================================="
        println "üìç Ubicaci√≥n: ${userHome}/.m2/repository"
        println "\nüì¶ Para usar esta librer√≠a en otro proyecto, agrega:"
        println "\ndependencies {"
        println "    implementation '${projectGroup}:${projectName}:${projectVersion}'"
        println "}"
        println "\nüí° Aseg√∫rate de tener 'mavenLocal()' en repositories"
        println "==========================================\n"
    }
}
