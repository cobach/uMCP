plugins {
    id 'java'
    id("io.freefair.lombok") version "8.13.1"
    id 'application'
    id 'maven-publish'
}

group = 'org.gegolabs'
version = '1.1.0'

application {
    mainClass = 'org.gegolabs.mcp.MCPServerCLI'
    applicationDefaultJvmArgs = [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED',
        '--add-opens', 'java.base/java.io=ALL-UNNAMED',
        '--add-opens', 'java.base/java.net=ALL-UNNAMED',
        '--add-opens', 'java.base/java.nio=ALL-UNNAMED',
        '--add-opens', 'java.base/java.time=ALL-UNNAMED',
        '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-opens', 'java.base/sun.util.calendar=ALL-UNNAMED'
    ]
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // MCP SDK - Using official 0.10.0 with mcp-java-bridge
    implementation 'io.modelcontextprotocol.sdk:mcp:0.10.0'
    
    // MCP Java Bridge for TCP transport support
    implementation 'org.gegolabs.mcp:mcp-java-bridge:1.0.0'
    
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'ch.qos.logback:logback-classic:1.5.13'

    //Generaci√≥n din√°mica de schemas
    implementation 'com.github.victools:jsonschema-generator:4.31.1'

    testImplementation 'org.mockito:mockito-core:5.8.0'

    // Used by DomainAvailability tool
    implementation 'commons-net:commons-net:3.9.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClass.get()
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Note: The mcp-java-bridge JAR now includes connector functionality
// No need to include a separate connector JAR

tasks.installDist {
    destinationDir = file("install")
    doLast {
        println "‚úÖ Distribution installed"
    }
}

test {
    useJUnitPlatform()
}

// Configure Javadoc to ignore warnings from generated code
javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

// Configuraci√≥n de publicaci√≥n
publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = 'uMCP'
                description = 'Lightweight framework for building MCP servers in Java with TCP transport'
                url = 'https://github.com/cobach/uMCP'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'cobach'
                        name = 'C√©sar Obach'
                        email = 'cesar.obach@gmail.com'
                    }
                }
            }
        }
    }
}

// Variables capturadas antes del bloque doLast para evitar deprecaci√≥n
def projectGroup = project.group
def projectName = project.name
def projectVersion = project.version
def userHome = System.properties['user.home']

tasks.register('publishLocal') {
    dependsOn 'publishToMavenLocal'

    doLast {
        println "\n=========================================="
        println "‚úÖ JAR publicado exitosamente!"
        println "=========================================="
        println "üìç Ubicaci√≥n: ${userHome}/.m2/repository"
        println "\nüì¶ Para usar esta librer√≠a en otro proyecto, agrega:"
        println "\ndependencies {"
        println "    implementation '${projectGroup}:${projectName}:${projectVersion}'"
        println "}"
        println "\nüí° Aseg√∫rate de tener 'mavenLocal()' en repositories"
        println "==========================================\n"
    }
}